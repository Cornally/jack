// Utility colors
$color_light_01       : #ffffff !default;
$color_light_02       : #f7f7f7 !default;
$color_light_03       : #efeeee !default;
$color_light_04       : #d8d8d8 !default;
$color_dark_01        : #15161A !default;
$color_dark_02        : #1D1E23 !default;
$color_dark_03        : #31333B !default;
$color_dark_04        : #414551 !default;


// Brand colors
$color_brand_primary  : #5258C7 !default;
$color_brand_secondary: #7defe5 !default;


$colors_brand: (
    primary  : $color_brand_primary,
    secondary: $color_brand_secondary
);


// Stateful colors
$color_state_success : #6FDA7A !default;
$color_state_warning : #EEE671 !default;
$color_state_info    : #6BB8EB !default;
$color_state_error   : #DC4646 !default;
$color_state_default : $color_dark_03 !default;
$color_state_disabled: $color_light_04 !default;

$colors_states: (
    default : $color_state_default,
    success : $color_state_success,
    warning : $color_state_warning,
    info    : $color_state_info,
    error   : $color_state_error,
    disabled: $color_state_disabled
);


////////////////////////////////////////////////////////////////////
// 
//  Color Shifter
//
//  Distribute a base color to generate light/dark utility colors.
//  `$name`: The base name of the outputted styling rule
//  `$color`: What's the starting point for our color spread
//  `$propery` : Specify a CSS property, e.g. `color` or `background`
//  `$shift`: Apply a lightening or darkening to base $color
//  `$count`: Number of derivatives
//  e.g. 
//  @include generateColorTicks('text_red', #ff0000, 'color', 'lighten', 30%, 5);
//  @include generateColorTicks('bg_purple', #264285, 'background', 'darken');
//
////////////////////////////////////////////////////////////////////
@mixin generateColorTicks($name, $color, $property, $shift, $desaturate:30%, $count:6) {
    $increment: 50/$count;
    @for $i from 1 through $count {
        .#{$name}_0#{$i} {
            @if ($shift == 'lighten') {
                #{$property}: desaturate(lighten($color, $i*$increment), $desaturate);
            } @else {
                #{$property}: desaturate(darken($color, $i*$increment), $desaturate);
            }
        } 
    }
}


////////////////////////////////////////////////////////////////////
// 
//  Font color dirivatives based off of an input color
//  
//  Create derivative colors from a base color, suitable for fonts
//
//  e.g.
//  @include generateFontColor('text_brand', $color_brand_secondary, $color_dark_01, 5);
//
////////////////////////////////////////////////////////////////////
@mixin generateFontColor($name, $color, $shift_color:$color_light_01, $count:6) {
    $increment: 75/$count;
    @for $i from 1 through $count {
        .#{$name}_0#{$i} {
            color: mix($color, $shift_color, $i*$increment);
        }
    }
}